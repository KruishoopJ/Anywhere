package nl.johnbaaij.anywhere.addNodes;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Vibrator;
import android.util.Log;
import android.util.SparseArray;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import com.google.android.gms.vision.CameraSource;
import com.google.android.gms.vision.Detector;
import com.google.android.gms.vision.barcode.Barcode;
import com.google.android.gms.vision.barcode.BarcodeDetector;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;

import nl.johnbaaij.anywhere.R;
import nl.johnbaaij.anywhere.abstractClasses.AbstractAddNodeActivity;
import nl.johnbaaij.anywhere.models.NodeGroups;

import static androidx.constraintlayout.widget.Constraints.TAG;

public class QRCodeScannerActivity extends AbstractAddNodeActivity {

    SurfaceView surfaceView;
    CameraSource cameraSource;
    BarcodeDetector barcodeDetector;
    ArrayList<String> scannedCodes;
    Vibrator vibrator;
    String lastScannedCode;

    private void openNodeOverviewActivity() {
        // TODO: build universal method with paramater -> class
        Log.d(TAG, "NodeGroupNameActivity called");
        Intent intent = new Intent(getApplicationContext(), NodeOverviewActivity.class);
        Log.d(TAG, "created intent");
        nodeGroups = new NodeGroups(null, null, scannedCodes, false, false, false);

        intent.putExtra("mNodeGroups", nodeGroups);
        startActivity(intent);
        Log.d(TAG, "Started intent");
    }

    @Override
    protected void onStart() {
        super.onStart();
        moveProgress(2);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openNodeOverviewActivity();
            }
        });

    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        Log.d(TAG, "Opened class");

        super.onCreate(savedInstanceState);
        scannedCodes = new ArrayList<String>(); // Create an ArrayList object
        setContentView(R.layout.activity_qr_code_scanner);
        addToolbar();
        setToolbarTitle("Scan your nodes");


        // Set values
        surfaceView = findViewById(R.id.qrCodeScanner);
        button = findViewById(R.id.buttonProgress);

        // Init textview so the code can overwrite
        textView = findViewById(R.id.ProgressText);

        // Set textview to scan node
        textView.setText("Scan node");
        button.setEnabled(false);

        //Initialise barcode detector
        barcodeDetector = new BarcodeDetector.Builder(this).setBarcodeFormats(Barcode.QR_CODE).build();

        //Initialise camera source
        cameraSource = new CameraSource.Builder(this, barcodeDetector)
                .setRequestedPreviewSize(640, 480).setAutoFocusEnabled(true).build();



        // Use surface view
        // Methods autogenerated
        surfaceView.getHolder().addCallback(new SurfaceHolder.Callback() {
            @Override
            public void surfaceCreated(SurfaceHolder holder) {
                // Add camera permission to manifest

                //TODO add if else 6:54
                try {
                    cameraSource.start(holder);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
            }

            @Override
            public void surfaceDestroyed(SurfaceHolder holder) {
                cameraSource.stop();
            }
        });

        // Set barcode detector
        // Methods auto generated
        barcodeDetector.setProcessor(new Detector.Processor<Barcode>() {
            @Override
            public void release() {

            }

            @Override
            public void receiveDetections(Detector.Detections<Barcode> detections) {
                // Get data
                final SparseArray<Barcode> qrCodes = detections.getDetectedItems();

                // If qr code scanned and optained data
                if (qrCodes.size() != 0) {
                    textView.post(new Runnable() {
                        @Override
                        public void run() {
                            // Vibrate when a QR is scanned
                            vibrator = (Vibrator) getApplicationContext().getSystemService(Context.VIBRATOR_SERVICE);
                            String scannedText = qrCodes.valueAt(0).displayValue;

                            Log.d(TAG, scannedText);
                            boolean isQuantified = scannedText.indexOf("quantified") != -1;

                            if (scannedText != lastScannedCode) {
                                // TODO: if scannedText already exists in database: Prompt: "Do you want to reinstall/move this node" or "this node is properly installed"
                                if (isQuantified) {

                                    if (!scannedCodes.contains(scannedText)){
                                        nodeConfirmed(scannedText);
                                        vibrator.vibrate(100);
                                        button.setEnabled(true);
                                        setButtonCollor();
                                        lastScannedCode = scannedText;
                                        textView.setText(scannedText +" added");
                                    }

                                    else
                                        textView.setText("This node was already added");
                                } else
                                    textView.setText("This is not a Quantified product");
                            }

                            else
                                textView.setText("This node is already added");

                            // Wait 200ms before opening camera
                            Handler handler = new Handler();
                            handler.postDelayed(new Runnable() {
                                public void run() {
                                    try {
                                        cameraSource.start(surfaceView.getHolder());
                                    } catch (IOException e) {

                                        //TODO on error
                                        e.printStackTrace();
                                    }
                                }
                            }, 200);
                        }
                    });
                }
            }
        });
    }

    private void nodeConfirmed(String scannedText) {

        lastScannedCode = scannedText;

        //this function checks if the qr code is previously scanned
        // if it's not it's added to the arraylist scannedCodes
        int totalCount = Collections.frequency(scannedCodes, scannedText);
        if (totalCount != 0) {

        } else {
            scannedCodes.add(scannedText);
            cameraSource.stop();
        }
    }
}
