package nl.johnbaaij.anywhere;

import android.content.Context;
import android.os.Bundle;
import android.os.Vibrator;
import android.util.Log;
import android.util.SparseArray;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;

import com.google.android.gms.vision.CameraSource;
import com.google.android.gms.vision.Detector;
import com.google.android.gms.vision.barcode.Barcode;
import com.google.android.gms.vision.barcode.BarcodeDetector;

import java.io.IOException;

import static androidx.constraintlayout.widget.Constraints.TAG;

public class QRCodeScannerActivity extends AppCompatActivity {

    SurfaceView surfaceView;
    CameraSource cameraSource;
    TextView textView;
    BarcodeDetector barcodeDetector;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        Log.d(TAG, "Opened class");
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_qr_code_scanner);
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        // Set values
        surfaceView = (SurfaceView) findViewById(R.id.qrCodeScanner);
        textView = (TextView) findViewById(R.id.qrText);

        //Initialise barcode detector
        barcodeDetector = new BarcodeDetector.Builder(this).setBarcodeFormats(Barcode.QR_CODE).build();

        //Initialise camera source
        cameraSource = new CameraSource.Builder(this, barcodeDetector)
                .setRequestedPreviewSize(640, 480).setAutoFocusEnabled(true).build();

        // Use surface view
        // Methods autogenerated
        surfaceView.getHolder().addCallback(new SurfaceHolder.Callback() {
            @Override
            public void surfaceCreated(SurfaceHolder holder) {
                // Add camera permission to manifest

                //TODO add if else 6:54
                try {
                    cameraSource.start(holder);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {

            }

            @Override
            public void surfaceDestroyed(SurfaceHolder holder) {
                cameraSource.stop();
            }
        });

        // Set barcode detector
        // Methods auto generated
        barcodeDetector.setProcessor(new Detector.Processor<Barcode>() {
            @Override
            public void release() {

            }

            @Override
            public void receiveDetections(Detector.Detections<Barcode> detections) {
                // Get data
                final SparseArray<Barcode> qrCodes = detections.getDetectedItems();

                // If qr code scanned and optained data
                if(qrCodes.size() != 0){
                    textView.post(new Runnable() {
                        @Override
                        public void run() {
                            Vibrator vibrator = (Vibrator)getApplicationContext().getSystemService(Context.VIBRATOR_SERVICE);
                            vibrator.vibrate(100);
                            String scannedText = qrCodes.valueAt(0).displayValue;
                            cameraSource.stop();
                            boolean isQuantified = scannedText.indexOf("quantified") !=-1? true: false;
                            if(isQuantified){
                                textView.setText(scannedText);
                            } else{
                                textView.setText("This is not a Quantified product :)");
                            }
                        }
                    });
                }
            }
        });

    }
}
